데이터 전송 시 get/post 방식 사용
# get : url에 ?(쿼리스트링) = ?key-value&key1-value1   -> 공유
# post : body에 데이터 / 보안
# get , post 방식을 통해 요청받는 경로(route)는 반드시 요청 방식을 선언




-------------get 방식 활용해 웹페이지에 덧셈 출력---------------
어제 봤듯이 return 부분은 html파일이기 떄문에 str을 붙혀줘야됨


사진 1)
+ get 방식이기 때문에 url에  "/add?num1=1&num2=2" 형식 작성
+ request.args["num1"] 의 형태로 값 불러옴

#request 라이브러리로 get방식의 요청을 받아줌
from flask import Flask , request

app = Flask(__name__)
# 데이터 전송 시 get/post 방식 사용
# get : url에 ?(쿼리스트링) = ?key-value&key1-value1   -> 공유
# post : body에 데이터 / 보안
@app.route("/")
def index():
    return("Hello World")

#num1과 num2를 get 방식을 활용해 출력
# get , post 방식을 통해 요청받는 경로(route)는 반드시 요청 방식을 선언
@app.route("/add", methods=["GET"])
def add_two_num():
    num1 = int(request.args["num1"])   ///정수로 변환
    num2 = int(request.args["num2"])   ///정수로 변환
    result = f"{num1}+{num2} = {num1+num2}"
    return result

if __name__ == "__main__":
    app.run()




-------------post 방식 활용해 웹페이지에 덧셈 출력---------------
둘다 쓰고싶으면~
@app.route("/login", methods=["GET","POST"])


사진2)
+ request.form["login_id"]의 형태로 id/pw 값 가져옴

#request 라이브러리로 get방식의 요청을 받아줌
from flask import Flask , request

app = Flask(__name__)
# 데이터 전송 시 get/post 방식 사용
# get : url에 ?(쿼리스트링) = ?key-value&key1-value1   -> 공유
# post : body에 데이터 / 보안
@app.route("/")
def index():
    return("Hello World")

@app.route("/login", methods=["POST"])
def uesr_login():
    login_id = request.form["login_id"]
    login_pw = request.form["login_pw"]
    if(login_id,login_pw) == ("juju", "1234"):
        result = f"로그인 성공! {login_id}님 welcome"
    else:
        result = "로그인 실패"
    return result

if __name__ == "__main__":
    app.run()




+++++++ 계산기에 대한 html 작성(get 방식)

사진3

myserver_request.html을 생성함
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <!-- 1. /add 페이지로 num1과 num2를 GET 방식으로 요청하자 -->
    <!-- 전송, 요청시 form 태그 이용 -->
    <!-- form 태그 요소 
      1. 어디로 : action
      2. 어떤 방식으로  : method
      3. 언제 : submit  -->
    계산기
    <form action="/add" method="get">
        <!-- 아래 name은 num1과 num2에 대한 key값임 -->
        <input type="text" name="num1"> +    ///"text" 작성란
        <input type="text" name="num2"> =
        <input type="submit" value="계산">    
    ///"submit" 제출란 = 출력버튼 형식 -> 누르게 되면 action 페이지로 값들이 이동
    </form>
    
    <!-- 2. /login 페이지로 login_id와 login_pw를 POST 방식으로 던지자 -->
</body>
</html>



++++++ 작성한 계산기 html을 render_template로 불러옴
---->get방식 쓴거임 login post는 만들지도 않았음
사진4

#request 라이브러리로 get방식의 요청을 받아줌
from flask import Flask , request, render_template

app = Flask(__name__)
@app.route("/")
def index():
    return render_template("myserver_request.html")

#num1과 num2를 get 방식을 활용해 출력
# get , post 방식을 통해 요청받는 경로(route)는 반드시 요청 방식을 선언
@app.route("/add", methods=["GET"])
def add_two_num():
    num1 = int(request.args["num1"])
    num2 = int(request.args["num2"])
    result = f"{num1}+{num2} = {num1+num2}"
    return result

@app.route("/login", methods=["POST"])
def uesr_login():
    login_id = request.form["login_id"]
    login_pw = request.form["login_pw"]
    if(login_id,login_pw) == ("juju", "1234"):
        result = f"로그인 성공! {login_id}님 welcome"
    else:
        result = "로그인 실패"
    return result

if __name__ == "__main__":
    app.run()



+++++++ 로그인 창에 대한 html 작성(post방식)
------- 로그인 창에 대한 부분만 html 작성했슴
사진 5)

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <!-- 2. /login 페이지로 login_id와 login_pw를 POST 방식으로 던지자 -->
    <form action="/login" method="post">
        <table>
            <tr>
                <td align="right">ID :</td>
                <td><input type="text" name="login_id"></td>
            </tr>
            <tr>
                <td>PW :</td>
                <td><input type="password" name="login_pw"></td>
            </tr>
        </table>
        <input type="submit" value="로그인">
    </form>    
</body>
</html>



****************************
사진6 -> 전체 html적용 시, 페이지에 get방식의 계산기와 post 방식의 로그인 페이지
*****************************



---------ngrok forwarding 주소를 접속 가능 ----------------------
배포하는거 한거임
----> flask로 열어 놓고, ngrok를 통해 외부에서도 누구나 접속 가능하도록 함

- ngrok.exe 실행 후 명령어 입력
ngrok http http://localhost:5000
2. flask server run
3. ngrok화면에 있는 Forwarding 파트에
https:// 시작하고 .app으로 끝나는 주소!!
이 주소로 접속하면 누구나 여러분들 flask server접속 가능





--------------자동화에 대한 개념---------------------------------
사람이 관여하는 부분을 최소화
1. 파일 및 데이터 자동화
2. 웹스크래핑 및 크롤링
3. 데이터베이스 활용
4. API 활용 및 자동화 --> API 데이터 가져오기
5. GUI 자동화
6. github action






------------------GUI 자동화 -----------------------

사진7 autoguio 명령어

auto.py



사진8 예제

# pyautogui 라이브러리를 활용한 마우스 및 키보드 자동화
import pyautogui

time.sleep(2)
pyautogui.moveTo(x, y)
# x, y -> 모니터 맨 왼쪽 상단
# 1920 x 1080 모니터 해상도 
# (1920, 1080) -> 모니터 맨 오른쪽 하단
pyautogui.moveTo(1920, 1080)
pyautogui.rightClick(1000,400)
# 2초 동안 500, 200으로 이동해서 클릭/더블클릭
pyautogui.moveTo(500,200, duration = 2)
pyautogui.click()
pyautogui.doubleClick(1000,400)
# 2초 동안 드래그도 가능
pyautogui.moveTo(700,400)
pyautogui.dragTo(900,900,duration=2)



사진 9
write, press, hotkey 예제

#pyautogui.write("Hello World")
#pyautogui.press("enter")
#print(pyautogui.KEYBOARD_KEYS)
time.sleep(2)
#pyautogui.hotkey("ctrl","c")
#pyautogui.press("right")
#pyautogui.press("enter")
#pyautogui.hotkey("ctrl","v")


interval을 주고 쓰고 싶을 때에는 typewrite

#str2 = "Hello World"
#pyautogui.typewrite(str2, interval=0.1)




---------메모장을 켜서 원하는 글(한글) 쓰기

사진 10 )

pyautogui.press("win")  ///window키
pyautogui.write("memo")
pyautogui.press("enter")
time.sleep(1)
pyautogui.press("hangul")
time.sleep(2)
pyautogui.write("dhsmfdml wjatladms")
time.sleep(1)
pyautogui.press("enter")
pyautogui.write("enrnenrnenrn")
time.sleep(1)
pyautogui.press("enter")
pyautogui.write("Wkwkdaus")
time.sleep(1)
pyautogui.press("enter")



------ 네이버에 로그인 버튼 이미지를 찾아서 클릭------

button.png를 활용하여 버튼을 누르도록 한다.

사진 11)
# 네이버에 로그인 버튼 이미지를 찾아서 클릭
import pyautogui
import time

time.sleep(3)
# 특정 이미지가 화면이 있는지 검색
button = pyautogui.locateCenterOnScreen("button.png")
print(button)
pyautogui.click(button)




---------github action 활용 배포-=---------
: 특정 이벤트 발생했을떄 자동으로 실행

yml: (yaml aint mark up language) 
github action의 자동화된 작업을 설정하기 위해 사용

github에서 사용하는 크론 문법 

---pdf 사진 참조


내가 작성한 yaml파일
사진 12)

name: Fetch Weather Seoul Date # 서울 날씨 정보 수집

on: # 작업을 수행하는 조건
  schedule: # 스케줄링
    - cron: "*/1 * * * *"
  workflow_dispatch: # 수동으로 동작가능
  push: # 레퍼지토리에 psuh가 일어난다면 동작
    branches: 
      - main # main에 push가 일어남
jobs: # 실행할 작업을 정의
  fetch_weather: # 작업 이름
    runs-on: ubuntu-lastes # 우분투 최신버전

    steps: # 실행 동작 단계
      - name: 저장소 체크아웃
        uses: actions/checkout@v3 # 현재 github 저장소를 clone
        with: # 조건을 작성
          token: ${{secrets.GITHUB_TOKEN}} # 내 github 권한 쓰겠다
      - name: Python 설정
        uses: actions/setup-python@v4 # python 설치 플러그인 동작
        with:
          python-version: "3.9"
      - name: 필요한 패키지 설치
        run: pip install requests # API 요청 위한 라이브러리 설치
      - name: 날씨 데이터 가져오기
        env: # GITHUB secrets에서 환경 변수 가져오기
          OPENWEATHER_API_KEY: ${{secrets.OPENWEAHTER_API_KEY}}
        run: python weather_script.py # 파이썬 스크립트를 실행해라
      - name: 변경 사항 반영(commit) 및 push
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions@github.com"
          git add seoul_weather.csv # 날씨 데이터 저장 csv를 github에 추가
          git commit -m "Update weather data (auto)" # 변경 사항이 있을 경우에만 commit
          git push # 변경 사항을 git에 push





------오후------------------------------------
github에 사용할 weather_scripty.py를 만든다

-사진 13- weather_scripty.py를 VSCODE로 작성하고
- 사진 13-1 - github에 API KEY만 숨겨서 옮겨 적음


script.py : 
import requests
import csv
from datetime import datetime
import os

API_KEY = "73de5d433e1bb122b2df023060e43454"
CITY = "Seoul"
URL = f"http://api.openweathermap.org/data/2.5/weather?q={CITY}&appid={API_KEY}&units=metric"

response = requests.get(URL)
data = response.json()
temp = data["main"]["temp"]
humidity = data["main"]["humidity"]
description = data["weather"][0]["description"]
timezone = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
print(temp, humidity, description, timezone)

# 위의 4개의 데이터를 가지는 csv파일 생성!!
csv_filename = "seoul_weather.csv"
header = ["timezone", "temp", "humidity", "description"]

# csv가 존재하면 -> True
# csv가 존재하지 않으면 -> False
file_exist = os.path.isfile(csv_filename)

# mode = "a" -> if not is file -> create
# if is file -> write
with open(csv_filename, "a", newline="") as file:
    writer = csv.writer(file)

    # 파일이 존재하지 않는다 -> 헤더가 없다!!
    if not file_exist:
        writer.writerow(header)

    writer.writerow([timezone, temp, humidity, description])

    print("csv 저장 완료!!")



-사진 13-2- 나의 API_KEY를 SECRET 모드로 설정하였다.



----> yml파일은 동작을 위한 설정, python은 API접속 데이터 수집 코드
----->이렇게 만들면 자동으로 서울의 날씨를 csv로 저장하는 봇 생성







