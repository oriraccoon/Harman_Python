flask를 사용하면서 데이터 전송 시 get/post 방식을 사용한다
두 방식의 특징은
# get : url에 ?(쿼리스트링) = ?key-value&key1-value1   -> 공유
# post : body에 데이터 / 보안
# get , post 방식을 통해 요청받는 경로(route)는 반드시 요청 방식을 선언



이를, 그동안 배웠던 웹 페이지 생성 방식과 결합하여 실습한다.
먼저, get 방식을 활용해 웹페이지에 계산기를 만들어보자.

-사진1 첨부-
덧셈을 출력하기 위해 새로운 루트를 "/add"를 만들고 methods=["GET"]방식으로 설정한다.
get방식에서는 request.args["변수명"]으로 url 쿼리 문자열에 포함된 변수를 저장한다.

**이때 request.args["변수명"]의 값은 기본적으로 문자열(str) 타입이므로, 이를 int()를 사용하여 정수(int) 로 변환해야한다**

get 방식의 경우, 데이터의 정보를 url에 담기 때문에 num1과 num2에 대한 값을 아래의 형태로
작성하여 새로운 루트인 "/add" url의 뒤에 추가한다
"/add?num1=10&num2=2"
이렇게 10과 2의 값을 넣어 12라는 값을 출력하는 웹페이지를 만들 수 있다.



post 방식도 실습하기 위해 로그인 웹페이지를 만들어보자

-사진 2 첨부-
로그인을 위한 웹 페이지를 새로 만들기 위해 "/login" 웹 페이지를 만들고 methods=["POST"] 방식으로 설정한다. 앞서 만들었던 get방식의 계산기와 비슷하지만 body에 정보를 숨겨 보안성을 자랑하는 post 방식은 request.form을 사용한다. 아래와 같이 html파일을 작성하여 form을 만들어 주고, 사용자가 페이지에서 작성하고 보내는 id,pw에 대한 데이터를 불러오게 됩니다.

-사진 5- 첨부
결과: -사진5-1 - 첨부 & -사진5-1.1- 첨부



get방식을 활용하는 계산기의 웹페이도 예쁘게 만들기 위해 html파일을 수정하였다.
-사진3- 첨부
-사진 4 -1- & -사진 4-2 - 



둘다 한 페이지에 쓰고싶다면 아래와 같이 하면 된다.
-사진2-  && -사진6- && - 사진 6 html - 



---------ngrok forwarding 주소를 접속 가능 ----------------------
배포하는거 한거임
----> flask로 열어 놓고, ngrok를 통해 외부에서도 누구나 접속 가능하도록 함

- ngrok.exe 실행 후 명령어 입력
ngrok http http://localhost:5000
2. flask server run
3. ngrok화면에 있는 Forwarding 파트에
https:// 시작하고 .app으로 끝나는 주소!!
이 주소로 접속하면 누구나 여러분들 flask server접속 가능



autogui : pyautogui 라이브러리를 활용한 마우스 및 키보드 자동화
코드 및 기능: 마우스와 키보드로 할 수 있는 것들 모두 다 가능
    - 사진8 첨부 - 

    - 사진9 첨부 -
hotkey : ctrl+c or ctrl+v와 같은 기능도 설정 가능
press : 누르는 키에 대한 설정  
write : 글 작성하기와 같은 기능들도 사용 가능
typewrite : interval을 쓰고 싶을때 사용 -> 완급 조절 용
	ㄴ 형태 : # str2 = "Hello World"
                     # pyautogui.typewrite(str2, interval=0.1)


예제: 

1) 메모장을 켜서 원하는 글(한글)을 써보자
-사진 10-

결과 :
-사진 10-1 - 


2) 네이버에 로그인 버튼 이미지를 찾아서 클릭하도록 하자
아래와 같은 button사진을 workspace에 저장하고, 페이지를 탐색하며 button과 동일한 이미지를 찾아 위치 정보를 나타낸다. (될때 안될때가 많으므로 실행 조건이 까다로움...)
-button 사진-
-사진 11- 




우리가 어제 알아보았던 배포 방법 중 하나인 github action을 활용하여 배포해보자.
특정 이벤트가 발생했을 때 자동으로 실행하여 아주 유용하다.

그러면 먼저, yml파일에 대해서 알아보자.
yml (yaml aint mark up language) :
github action의 자동화된 작업을 설정하기 위해 사용, 즉 기본 설정을 담당하는 것 같다.

형태는 이러하다.
-pdf 사진 참조-


그래서 서울 날씨의 정보를 csv로 가지고 있는 파일에 대한 데이터 가져오기 위해 github에 yml파일을 작성한다. 주로 python 기본설정에 대한 패키지 설치나, github에 seoul_weather.csv를 불러오고 표출하는 것에 대한 설정을 진행하였다.
-사진 12-


그래서 openweather의 API 정보를 활용하여 서울에 대한 온도,습도,날씨, 날짜에 대한 정보를 csv 파일이 없다면 생성하고, 그 안에 데이터를 저장하는 pyhthon 코드를 작성하였다.
-사진 13-1 -

API_KEY는 중요하기 때문에 secrets -> actions로 값을 남들이 못보게 저장한다.
-사진 13-2 - 

쌓여있는 workflow를 run workflow를 진행하면 아래 사진처럼 seoul_weather.csv 파일이 생성된다.
이를 열어보면, openweather에서 데이터를 가져온 것을 저장해 놓은 것을 볼 수 있다.
-사진 13-3 -
-사진 13-4-
